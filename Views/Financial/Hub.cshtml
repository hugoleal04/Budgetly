@model Budgetly.Models.HubViewModel
@{
    ViewData["Title"] = "User Hub";
}

<h1>@ViewData["Title"]</h1>

<p><strong>Name:</strong> @Model.Account.name</p>
<p><strong>Balance:</strong> @Model.Account.money €</p>

<a class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addMoneyModal">Add money</a>
<a asp-controller="Financial" asp-action="ExpenseMenu" asp-route-id="@Model.Account.id" class="btn btn-danger">Add expense</a>
<a asp-controller="Financial" asp-action="Index" class="btn btn-secondary">Back</a>

<p><strong>Per day you can spend:</strong> <span id="perDay">0</span> €</p>

<div class="mb-3">
  <label class="form-label">Select target date:</label>
  <input type="date" id="targetDate" class="form-control">
</div>

<script>
    // saldo inicial da conta
    let balance = @Model.Account.money.ToString(System.Globalization.CultureInfo.InvariantCulture);

    // pega despesas recorrentes até a data escolhida
    const recurringExpenses = [
        @foreach(var e in Model.Expenses.Where(x => x.Recurring && x.NextDueDate.HasValue))
        {
            if(e.NextDueDate.Value.Date <= DateTime.Today.AddYears(1)) // só para evitar muito código
            {
                @: { price: @e.Price.ToString(System.Globalization.CultureInfo.InvariantCulture), date: "@e.NextDueDate.Value.ToString("yyyy-MM-dd")"}, 
            }
        }
    ];

    const dateInput = document.getElementById("targetDate");
    const perDaySpan = document.getElementById("perDay");

    dateInput.addEventListener("change", () => {
        const today = new Date();
        const target = new Date(dateInput.value);

        if (target <= today) {
            perDaySpan.textContent = "0";
            return;
        }

        // calcula diferença de dias
        const diffTime = target - today;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        // subtrai despesas recorrentes que caem antes da data
        let adjustedBalance = parseFloat(balance);
        recurringExpenses.forEach(exp => {
            const expDate = new Date(exp.date);
            if (expDate <= target) {
                adjustedBalance -= parseFloat(exp.price);
            }
        });

        const perDay = (adjustedBalance / diffDays).toFixed(2);
        perDaySpan.textContent = perDay;
    });
</script>


<!-- Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addMoneyLabel">Add Money</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form method="post" asp-controller="Financial" asp-action="AddMoney" asp-route-id="@Model.Account.id">
          <div class="mb-3">
            <label for="amount" class="form-label">Amount (€)</label>
            <input type="number" step="0.01" class="form-control" id="amount" name="amount" required>
          </div>
          <button type="submit" class="btn btn-primary">Add</button>
        </form>
      </div>
    </div>
  </div>
</div>





<h2>Expenses:</h2>
<div id="expensesTable" class="table-responsive" style="max-height: 25vh; overflow-y: auto;">
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Type</th>
                <th>Description</th>
                <th>Price</th>
                <th>Date</th>
            </tr>
    </thead>
    <tbody>
        @foreach (var expense in Model.Expenses)
        {
            <tr>
                <td>@expense.Type</td>
                <td>@expense.Description</td>
                <td>@expense.Price</td>
                <td>@expense.Date.ToString("yyyy-MM-dd")</td>
            </tr>
        }
    </tbody>
</table>
</div>
<br />

<button id="generatePDF" class="btn btn-primary">Generate PDF</button>

<script>
document.getElementById('generatePDF').addEventListener('click', () => {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();

    const rows = [];
    document.querySelectorAll("#expensesTable tbody tr").forEach(tr => {
        const cells = tr.querySelectorAll("td");
        const date = new Date(cells[3].textContent);
        if (date.getMonth() === currentMonth && date.getFullYear() === currentYear) {
            rows.push([
                cells[0].textContent,
                cells[1].textContent,
                cells[2].textContent,
                cells[3].textContent
            ]);
        }
    });

    doc.text(`Expenses - ${now.toLocaleString('default', { month: 'long' })} ${currentYear}`, 14, 15);

    doc.autoTable({
        head: [['Type', 'Description', 'Price', 'Date']],
        body: rows,
        startY: 20
    });

    doc.save(`Expenses_${currentMonth + 1}_${currentYear}.pdf`);
});
</script>

