@model Budgetly.Models.HubViewModel
@{
    ViewData["Title"] = "User Hub";
}

<h1>@ViewData["Title"]</h1>

<p><strong>Name:</strong> @Model.Account.name</p>
<p><strong>Balance:</strong> @Model.Account.money €</p>

<a class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addMoneyModal">Add money</a>
<a asp-controller="Financial" asp-action="ExpenseMenu" asp-route-id="@Model.Account.id" class="btn btn-danger">Add expense</a>
<a asp-controller="Financial" asp-action="Index" class="btn btn-secondary">Back</a>

<p><strong>Per day you can spend:</strong> <span id="perDay">0</span> €</p>

<div class="mb-3">
  <label class="form-label">Select target date:</label>
  <input type="date" id="targetDate" class="form-control">
</div>

<script>
    // saldo inicial da conta
    let balance = @Model.Account.money.ToString(System.Globalization.CultureInfo.InvariantCulture);

    // pega despesas recorrentes até a data escolhida
    const recurringExpenses = [
        @foreach(var e in Model.Expenses.Where(x => x.Recurring && x.NextDueDate.HasValue))
        {
            if(e.NextDueDate.Value.Date <= DateTime.Today.AddYears(1)) // só para evitar muito código
            {
                @: { price: @e.Price.ToString(System.Globalization.CultureInfo.InvariantCulture), date: "@e.NextDueDate.Value.ToString("yyyy-MM-dd")"}, 
            }
        }
    ];

    const dateInput = document.getElementById("targetDate");
    const perDaySpan = document.getElementById("perDay");

    dateInput.addEventListener("change", () => {
        const today = new Date();
        const target = new Date(dateInput.value);

        if (target <= today) {
            perDaySpan.textContent = "0";
            return;
        }

        // calcula diferença de dias
        const diffTime = target - today;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        // subtrai despesas recorrentes que caem antes da data
        let adjustedBalance = parseFloat(balance);
        recurringExpenses.forEach(exp => {
            const expDate = new Date(exp.date);
            if (expDate <= target) {
                adjustedBalance -= parseFloat(exp.price);
            }
        });

        const perDay = (adjustedBalance / diffDays).toFixed(2);
        perDaySpan.textContent = perDay;
    });
</script>


<!-- Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addMoneyLabel">Add Money</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form method="post" asp-controller="Financial" asp-action="AddMoney" asp-route-id="@Model.Account.id">
          <div class="mb-3">
            <label for="amount" class="form-label">Amount (€)</label>
            <input type="number" step="0.01" class="form-control" id="amount" name="amount" required>
          </div>
          <button type="submit" class="btn btn-primary">Add</button>
        </form>
      </div>
    </div>
  </div>
</div>





<h2>Expenses:</h2>
<div id="expensesTable" class="table-responsive" style="max-height: 25vh; overflow-y: auto;">
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Type</th>
                <th>Description</th>
                <th>Price</th>
                <th>Date</th>
                <th>Delete</th>
            </tr>
    </thead>
    <tbody>
        @foreach (var expense in Model.Expenses)
        {
            <tr>
                <td>@expense.Type</td>
                <td>@expense.Description</td>
                <td>@expense.Price</td>
                <td>@expense.Date.ToString("yyyy-MM-dd")</td>
                <td>
                    <center>
                    <form asp-controller="Financial" asp-action="DeleteExpense" method="post" style="display:inline;">
                        <input type="hidden" name="Description" value="@expense.Description" />
                        <input type="hidden" name="accountId" value="@Model.Account.id" />
                        <input type="hidden" name="Price" value="@expense.Price" />
                        <button type="submit" class="btn btn-sm btn-danger"
                                onclick="return confirm('Tens a certeza que queres apagar esta despesa?');">
                            &times;
                        </button>
                    </form>
                    </center>
                </td>
            </tr>
        }
    </tbody>
</table>
</div>
<br />

@{
    var grouped = Model.Expenses
        .GroupBy(e => e.Type)
        .Select(g => new {
            Type = g.Key,
            Total = g.Sum(x => x.Price)
        })
        .ToList();

    var total = grouped.Sum(x => x.Total);
}

<div class="progress" style="height: 30px;">
    @{
        string[] colors = { "bg-primary", "bg-success", "bg-info", "bg-warning", "bg-danger" };
        int i = 0;
    }
    @foreach (var item in grouped)
    {
        var percent = total > 0 ? (item.Total / total) * 100 : 0;
        var color = colors[i % colors.Length];
        i++;

        <div class="progress-bar @color" 
            role="progressbar" 
            style=@($"width:{percent.ToString(System.Globalization.CultureInfo.InvariantCulture)}%")
            aria-valuenow="@percent" 
            aria-valuemin="0" 
            aria-valuemax="100">
            @item.Type (@percent.ToString("0.##")%)
        </div>
    }
</div>






<br />
<div class="d-flex align-items-center gap-2">
  <select id="monthSelect" class="form-select w-auto">
    <option value="0">January</option>
    <option value="1">February</option>
    <option value="2">March</option>
    <option value="3">April</option>
    <option value="4">May</option>
    <option value="5">June</option>
    <option value="6">July</option>
    <option value="7">August</option>
    <option value="8">September</option>
    <option value="9">October</option>
    <option value="10">November</option>
    <option value="11">December</option>
  </select>


  <select id="yearSelect" class="form-select w-auto"></select>

  <button id="generatePDF" class="btn btn-primary">Gerar PDF</button>
</div>

<script>
  const yearSelect = document.getElementById('yearSelect');
  const currentYear = new Date().getFullYear();
  for (let y = currentYear - 5; y <= currentYear + 5; y++) {
    const opt = document.createElement('option');
    opt.value = y;
    opt.textContent = y;
    if (y === currentYear) opt.selected = true;
    yearSelect.appendChild(opt);
  }

  function getDaysInMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
  }

  document.getElementById('generatePDF').addEventListener('click', () => {
    const selectedMonth = parseInt(document.getElementById('monthSelect').value);
    const selectedYear = parseInt(document.getElementById('yearSelect').value);

    const days = getDaysInMonth(selectedYear, selectedMonth);
    let totalPrice = 0;

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    const rows = [];
    document.querySelectorAll("#expensesTable tbody tr").forEach(tr => {
      const cells = tr.querySelectorAll("td");
      const date = new Date(cells[3].textContent);

      if (date.getMonth() === selectedMonth && date.getFullYear() === selectedYear) {
        rows.push([
          cells[0].textContent,
          cells[1].textContent,
          cells[2].textContent,
          cells[3].textContent
        ]);
        const price = parseFloat(cells[2].textContent.replace(',', '.'));
        totalPrice += price;
      }
    });

    const avg = days > 0 ? (totalPrice / days) : 0;

    const monthName = new Date(selectedYear, selectedMonth).toLocaleString('default', { month: 'long' });

    doc.text(`Expenses - ${monthName} ${selectedYear}`, 14, 15);
    doc.text(`Average: ${avg.toFixed(2)}`, 14, 22);
    doc.text(`Total money spend: ${totalPrice.toFixed(2)}`, 14, 28);

    doc.autoTable({
      head: [['Type', 'Description', 'Price', 'Date']],
      body: rows,
      startY: 35
    });

    doc.save(`Expenses_${selectedMonth + 1}_${selectedYear}.pdf`);
  });
</script>


